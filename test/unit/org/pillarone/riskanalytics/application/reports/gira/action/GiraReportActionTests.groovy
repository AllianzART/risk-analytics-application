package org.pillarone.riskanalytics.application.reports.gira.action

import org.pillarone.riskanalytics.application.util.LocaleResources
import org.pillarone.riskanalytics.application.reports.AbstractReportActionTests
import org.pillarone.riskanalytics.application.ui.main.view.RiskAnalyticsMainModel
import org.pillarone.riskanalytics.core.simulation.item.Simulation
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource
import org.pillarone.riskanalytics.application.reports.ReportHelper
import org.pillarone.riskanalytics.application.ui.util.UIUtils
import com.ulcjava.base.application.ULCComponent
import org.pillarone.riskanalytics.application.reports.gira.model.GiraReportModel
import org.pillarone.riskanalytics.application.reports.ReportModel
import org.pillarone.riskanalytics.application.reports.bean.ExpectedLossChartDataBean
import org.pillarone.riskanalytics.core.dataaccess.ResultAccessor
import org.pillarone.riskanalytics.application.reports.comment.action.CommentReportActionTests
import org.pillarone.riskanalytics.core.simulation.item.parameter.comment.Comment
import org.pillarone.riskanalytics.application.ui.util.DateFormatUtils
import org.pillarone.riskanalytics.application.util.JEstimator
import org.pillarone.riskanalytics.application.reports.bean.ReportChartDataBean

/**
 * @author fouad.jaada@intuitive-collaboration.com
 */
class GiraReportActionTests extends AbstractReportActionTests {
    int gIndex = 1000000000000000000000

    void testGeneratePDFReport() {
//        File testExportFile = File.createTempFile("test", ".pdf")
        GiraReportAction action = new GiraReportAction()

        action.metaClass.getSelectedItem = {->
            new Simulation("test")
        }



        action.metaClass.getFileName = {->
//            println "testExportFile ${testExportFile.getAbsolutePath()}"
            //            return testExportFile.getAbsolutePath()
            return "test"
        }
        action.metaClass.initReportModel = {Simulation simulation ->

        }

        action.metaClass.saveReport = {def output, String fileName, ULCComponent component ->
            File f = new File("E:/downloads/reports/Gira.pdf")
//            FileOutputStream fos = new FileOutputStream(testExportFile)
            FileOutputStream fos = new FileOutputStream(f)
            fos.write(output)
        }

//        action.metaClass.getReport = {->
        GiraReportModel model = new GiraReportModel(null)

        model.metaClass.getPeriodCount = {->
            return 1
        }
        model.metaClass.getPaths = {->
            Map<PathType, List<String>> map = [:]
            map.put(PathType.CLAIMSGENERATORS, ["path1", "path2", "path3", "path4"] as List<String>)
            map.put(PathType.REINSURANCE, ["path1", "path2", "path3", "path4"] as List<String>)
            return map
        }

        model.metaClass.getPathType = {String path, String modelName ->
            return "attritional"
        }

        model.metaClass.getChartDataSource = { int period, String path ->
            //pdf chart
            Collection currentValues = new ArrayList<ReportChartDataBean>()
//            List xyPairs = [[[0.2, 0.2], [0.4, 0.3], [0.6, 0.9], [0.1, 0.8]], [[0.3, 0.4], [0.7, 0.5], [0.8, 0.4], [0.9, 0.2]], [[0.3, 0.4], [0.7, 0.5], [0.8, 0.4], [0.9, 0.2]], [[0.3, 0.4], [0.7, 0.5], [0.8, 0.4], [0.9, 0.2]], [[0.3, 0.4], [0.7, 0.5], [0.8, 0.4], [0.9, 0.2]], [[0.3, 0.4], [0.7, 0.5], [0.8, 0.4], [0.9, 0.2]]]
            List xyPairs = [[4.002748811660515E7, 0.0], [4.5329557376964346E7, 4.569124947003888E-11], [4.577458619169055E7, 5.5176196307463135E-11], [4.621961500641675E7, 6.63727780349794E-11], [4.666464382114296E7, 7.964074717340532E-11], [4.710967263586916E7, 9.52101769738201E-11], [4.7554701450595364E7, 1.1355928597496376E-10], [4.799973026532157E7, 1.3478715919544572E-10], [4.844475908004777E7, 1.5973807789789445E-10], [4.8889787894773975E7, 1.8860692651505645E-10], [4.933481670950018E7, 2.2196777521501438E-10], [4.977984552422638E7, 2.605528276282207E-10], [5.0224874338952586E7, 3.0472132316597615E-10], [5.066990315367879E7, 3.5554529731571266E-10], [5.111493196840499E7, 4.1374361499801304E-10], [5.15599607831312E7, 4.802117215806713E-10], [5.20049895978574E7, 5.558094077555362E-10], [5.2450018412583604E7, 6.417878759410009E-10], [5.289504722730981E7, 7.388241192935146E-10], [5.334007604203601E7, 8.483829617405332E-10], [5.3785104856762215E7, 9.715791090397122E-10], [5.423013367148842E7, 1.109785406559152E-9], [5.467516248621462E7, 1.2643900330719438E-9], [5.512019130094083E7, 1.4368108943687149E-9], [5.556522011566703E7, 1.628566343189144E-9], [5.6010248930393234E7, 1.841203725395433E-9], [5.645527774511944E7, 2.076330573006298E-9], [5.690030655984564E7, 2.335538522940906E-9], [5.7345335374571845E7, 2.62052904815362E-9], [5.779036418929805E7, 2.9327794695446844E-9], [5.823539300402425E7, 3.2740180112154628E-9], [5.8680421818750456E7, 3.6458103353868875E-9], [5.912545063347666E7, 4.0498091776117225E-9], [5.957047944820286E7, 4.487322520809177E-9], [6.001550826292907E7, 4.9597362092992626E-9], [6.046053707765527E7, 5.468303892841789E-9], [6.0905565892381474E7, 6.014213651906642E-9], [6.135059470710768E7, 6.5983691727551075E-9], [6.179562352183388E7, 7.2216208682147206E-9], [6.2240652336560085E7, 7.8844084686226E-9], [6.268568115128629E7, 8.587075959414329E-9], [6.28482233851995E7, 8.853693311282318E-9], [6.313070996601249E7, 9.32967474700829E-9], [6.35757387807387E7, 1.011199109260207E-8], [6.40207675954649E7, 1.09335065464597E-8], [6.4465796410191104E7, 1.1793449169777837E-8], [6.44755878360728E7, 1.181280801215937E-8], [6.491082522491731E7, 1.2690558859598791E-8], [6.535585403964351E7, 1.3623334453667256E-8], [6.56885366314496E7, 1.4342850205227887E-8], [6.5800882854369715E7, 1.4589942325286726E-8], [6.5954389359004E7, 1.4930805910037263E-8], [6.59957955491469E7, 1.5023375321376422E-8], [6.61306756043017E7, 1.5326757788147803E-8], [6.624591166909592E7, 1.5588124547199202E-8], [6.64987791275078E7, 1.6168367609449458E-8], [6.669094048382212E7, 1.6615289893310486E-8], [6.67985515651912E7, 1.6867688536811292E-8], [6.68286617704755E7, 1.6938578064858836E-8], [6.71257571793574E7, 1.76440754946745E-8], [6.713596929854833E7, 1.7668511494839517E-8], [6.758099811327453E7, 1.8744533331253364E-8], [6.802602692800073E7, 1.9839634065465218E-8], [6.847105574272694E7, 2.094994124042489E-8], [6.891608455745314E7, 2.207110660498474E-8], [6.936111337217934E7, 2.3198636683330236E-8], [6.980614218690555E7, 2.43278008987491E-8], [7.025117100163175E7, 2.54534931159742E-8], [7.069619981635796E7, 2.6570594541196303E-8], [7.114122863108416E7, 2.7673774202713362E-8], [7.158625744581036E7, 2.8757650746037896E-8], [7.203128626053657E7, 2.981671577818036E-8], [7.247631507526277E7, 3.0845499807369186E-8], [7.292134388998897E7, 3.183858532293057E-8], [7.336637270471518E7, 3.279067073631014E-8], [7.381140151944138E7, 3.3696587879127824E-8], [7.425643033416758E7, 3.455136678396202E-8], [7.470145914889379E7, 3.5350283838455187E-8], [7.514648796361999E7, 3.608890796416372E-8], [7.55915167783462E7, 3.6763144168252205E-8], [7.60365455930724E7, 3.736927384854325E-8], [7.64815744077986E7, 3.790399127624988E-8], [7.69266032225248E7, 3.836445478206697E-8], [7.737163203725101E7, 3.8748262142402406E-8], [7.781666085197721E7, 3.9053519251704975E-8], [7.826168966670342E7, 3.927884956996634E-8], [7.870671848142962E7, 3.94233696034651E-8], [7.915174729615583E7, 3.948678468780571E-8], [7.959677611088203E7, 3.946925409355749E-8], [8.004180492560823E7, 3.9371508744819396E-8], [8.048683374033444E7, 3.9194771495594455E-8], [8.093186255506064E7, 3.894075548973745E-8], [8.137689136978684E7, 3.8611641356875075E-8], [8.182192018451305E7, 3.821004966090461E-8], [8.226694899923925E7, 3.773900905564485E-8], [8.271197781396545E7, 3.72019206603661E-8], [8.315700662869166E7, 3.660251921590885E-8], [8.360203544341786E7, 3.594483161914214E-8], [8.404706425814407E7, 3.5233133459122756E-8], [8.449209307287027E7, 3.4471904192215197E-8], [8.493712188759647E7, 3.366578159567148E-8], [8.538215070232268E7, 3.281951612996849E-8], [8.582717951704888E7, 3.1937925820113106E-8], [8.627220833177508E7, 3.1025852235844646E-8], [8.671723714650129E7, 3.008811811115585E-8], [8.716226596122749E7, 2.9129487095894908E-8], [8.76072947759537E7, 2.8154646648937043E-8], [8.80523235906799E7, 2.7168096343443448E-8], [8.84973524054061E7, 2.617422513175658E-8], [8.89423812201323E7, 2.517721480439157E-8], [8.938741003485851E7, 2.41810320162934E-8], [8.983243884958471E7, 2.3189407825044138E-8], [9.027746766431092E7, 2.2205821074560293E-8], [9.072249647903712E7, 2.1233485605807686E-8], [9.116752529376332E7, 2.0275341216573355E-8], [9.161255410848953E7, 1.9334048237790056E-8], [9.205758292321573E7, 1.8411985545137688E-8], [9.250261173794194E7, 1.7511251782298922E-8], [9.294764055266814E7, 1.663366953680353E-8], [9.339266936739434E7, 1.5780775631084983E-8], [9.383769818212055E7, 1.495390000813015E-8], [9.428272699684675E7, 1.4154066502923548E-8], [9.472775581157295E7, 1.3382083975643697E-8], [9.517278462629916E7, 1.2638524471930467E-8], [9.561781344102536E7, 1.1923802890050125E-8], [9.606284225575157E7, 1.1238091169436712E-8], [9.650787107047777E7, 1.058135942881346E-8], [9.695289988520397E7, 9.953542283528161E-9], [9.739792869993018E7, 9.354338505184953E-9], [9.784295751465638E7, 8.783362592080174E-9], [9.828798632938258E7, 8.24003550863104E-9], [9.873301514410879E7, 7.723857607992927E-9], [9.917804395883499E7, 7.2340109090009805E-9], [9.96230727735612E7, 6.769847129123581E-9], [1.000681015882874E8, 6.3306097284233025E-9], [1.005131304030136E8, 5.915305124351162E-9], [1.009581592177398E8, 5.523243175234369E-9], [1.0140318803246601E8, 5.1532434870656E-9], [1.0184821684719221E8, 4.804745984312965E-9], [1.01977222475929E8, 4.707525435105867E-9], [1.02089234533847E8, 4.624563701027771E-9], [1.0229324566191842E8, 4.476712410095654E-9], [1.0231133038241E8, 4.463813543668641E-9], [1.02721221837595E8, 4.179772107087496E-9], [1.0273827447664462E8, 4.1683134742166996E-9], [1.0318330329137082E8, 3.8785311336003145E-9], [1.0362833210609703E8, 3.6065154295205816E-9], [1.0407336092082323E8, 3.351481046590766E-9], [1.0451838973554944E8, 3.112539078453586E-9], [1.0496341855027564E8, 2.8888572688053993E-9], [1.0540844736500184E8, 2.679547430495298E-9], [1.0585347617972805E8, 2.4840402979574927E-9], [1.0629850499445425E8, 2.3012326831355425E-9], [1.0674353380918045E8, 2.130819442111719E-9], [1.0718856262390666E8, 1.971847874486706E-9], [1.07203684407032E8, 1.9666218197075174E-9], [1.07625256255216E8, 1.8264027797279138E-9], [1.0763359143863286E8, 1.8237337777119162E-9], [1.0807862025335906E8, 1.6857392450770464E-9], [1.08198454550561E8, 1.6502593271720574E-9], [1.08281651662348E8, 1.6260345547402658E-9], [1.0852364906808527E8, 1.5574909912945333E-9], [1.0896867788281147E8, 1.4382573054610126E-9], [1.09311666571452E8, 1.3521022482256604E-9], [1.0941370669753768E8, 1.3274024860153028E-9], [1.0985873551226388E8, 1.2246399989874127E-9], [1.1030376432699008E8, 1.1292270218403532E-9], [1.1074879314171629E8, 1.0408433269220387E-9], [1.1119382195644249E8, 9.589848960330697E-10], [1.116388507711687E8, 8.832713306147079E-10], [1.120838795858949E8, 8.130325493467526E-10], [1.125289084006211E8, 7.480724922689638E-10], [1.129739372153473E8, 6.881226651176373E-10], [1.1341896603007351E8, 6.327293066870587E-10], [1.1386399484479971E8, 5.815692002512877E-10], [1.1430902365952592E8, 5.344638785445803E-10], [1.1475405247425212E8, 4.91069150382598E-10], [1.1519908128897832E8, 4.509614039719782E-10], [1.1564411010370453E8, 4.140779152625255E-10], [1.1608913891843073E8, 3.8006308543449447E-10], [1.1653416773315693E8, 3.4871182470643504E-10], [1.1697919654788314E8, 3.1995503714374155E-10], [1.1742422536260934E8, 2.933358233419446E-10], [1.17736868729233E8, 2.7599729971940436E-10], [1.1786925417733555E8, 2.68885439671462E-10], [1.1831428299206175E8, 2.4648701040861064E-10], [1.1875931180678795E8, 2.258484348284536E-10], [1.1920434062151416E8, 2.0685226101989284E-10], [1.1964936943624036E8, 1.8940166172436158E-10], [1.2009439825096656E8, 1.7332065120382097E-10], [1.2053942706569277E8, 1.5849029888121214E-10], [1.2098445588041897E8, 1.4499412939276048E-10], [1.2142948469514517E8, 1.3253328304050835E-10], [1.2187451350987138E8, 1.210495039456081E-10], [1.2231954232459758E8, 1.10517969058284E-10], [1.2276457113932379E8, 1.007160566626619E-10], [1.2320959995404999E8, 9.176892061718613E-11], [1.236546287687762E8, 8.358972192724367E-11], [1.240996575835024E8, 7.610055775138837E-11], [1.245446863982286E8, 6.917624216515354E-11], [1.249897152129548E8, 6.279238946779554E-11], [1.2543474402768101E8, 5.690396954524441E-11], [1.2587977284240721E8, 5.152993222344478E-11], [1.2632480165713342E8, 4.6613780453726226E-11], [1.2676983047185962E8, 4.208816714311242E-11], [1.2721485928658582E8, 3.7975002799880703E-11], [1.2765988810131203E8, 3.420747362655293E-11], [1.2810491691603823E8, 3.074362706735345E-11], [1.2854994573076443E8, 2.757960674712531E-11], [1.2899497454549064E8, 2.4725715207440208E-11], [1.2944000336021684E8, 2.209239863796729E-11], [1.2988503217494304E8, 1.9743084621891566E-11], [1.3033006098966925E8, 1.7587575465140008E-11], [1.3077508980439545E8, 1.5618135353233932E-11], [1.3122011861912166E8, 1.3868094610689186E-11], [1.3166514743384786E8, 1.2251758835808585E-11], [1.3211017624857406E8, 1.0812899075458919E-11], [1.3255520506330027E8, 9.485585240086989E-12], [1.3300023387802647E8, 8.332140175148446E-12], [1.3344526269275267E8, 7.299078382853736E-12], [1.3389029150747888E8, 6.391055383197989E-12], [1.4055760399782735E8, 5.828470932679188E-13]]
            List xyPairs1 = []
            List xyPairs2 = []
//            if(changed)
            //             xyPairs = [[2.0013744058302604E7, 0.0], [2.266477868848216E7, 9.138249894007768E-11], [2.2887293095845267E7, 1.1035239261492652E-10], [2.3109807503208373E7, 1.3274555606995937E-10], [2.333232191057148E7, 1.5928149434681198E-10], [2.3554836317934584E7, 1.904203539476423E-10], [2.377735072529769E7, 2.2711857194993028E-10], [2.3999865132660795E7, 2.6957431839089635E-10], [2.42223795400239E7, 3.1947615579579423E-10], [2.4444893947387006E7, 3.7721385303012003E-10], [2.466740835475011E7, 4.439355504300387E-10], [2.4889922762113217E7, 5.211056552564545E-10], [2.5112437169476323E7, 6.094426463319682E-10], [2.533495157683943E7, 7.110905946314444E-10], [2.5557465984202534E7, 8.274872299960514E-10], [2.577998039156564E7, 9.604234431613727E-10], [2.6002494798928745E7, 1.1116188155111105E-9], [2.622500920629185E7, 1.283575751882047E-9], [2.6447523613654956E7, 1.4776482385870847E-9], [2.667003802101806E7, 1.696765923481135E-9], [2.6892552428381167E7, 1.9431582180795055E-9], [2.7115066835744273E7, 2.2195708131183933E-9], [2.733758124310738E7, 2.5287800661439956E-9], [2.7560095650470484E7, 2.873621788737552E-9], [2.778261005783359E7, 3.2571326863784417E-9], [2.8005124465196695E7, 3.6824074507910307E-9], [2.82276388725598E7, 4.152661146012793E-9], [2.8450153279922906E7, 4.671077045882047E-9], [2.8672667687286012E7, 5.241058096307486E-9], [2.8895182094649117E7, 5.8655589390896484E-9], [2.9117696502012223E7, 6.5480360224312366E-9], [2.934021090937533E7, 7.291620670774126E-9], [2.9562725316738434E7, 8.099618355223882E-9], [2.978523972410154E7, 8.974645041618785E-9], [3.0007754131464645E7, 9.919472418599055E-9], [3.023026853882775E7, 1.093660778568413E-8], [3.0452782946190856E7, 1.2028427303813914E-8], [3.0675297353553962E7, 1.3196738345510885E-8], [3.0897811760917068E7, 1.4443241736430227E-8], [3.1120326168280173E7, 1.5768816937245997E-8], [3.134284057564328E7, 1.7174151918829542E-8], [3.14241116925998E7, 1.7707386622564986E-8], [3.1565354983006384E7, 1.8659349494017554E-8], [3.178786939036949E7, 2.022398218520514E-8], [3.2010383797732595E7, 2.1867013092920518E-8], [3.22328982050957E7, 2.3586898339556872E-8], [3.22377939180364E7, 2.362561602431875E-8], [3.2455412612458806E7, 2.5381117719198753E-8], [3.2677927019821912E7, 2.724666890733582E-8], [3.28442683157248E7, 2.8685700410455775E-8], [3.2900441427185018E7, 2.917988465057486E-8], [3.2977194679502E7, 2.986161182007449E-8], [3.29978977745735E7, 3.004675064275333E-8], [3.30653378021509E7, 3.065351557629617E-8], [3.3122955834548123E7, 3.1176249094399834E-8], [3.32493895637539E7, 3.233673521889888E-8], [3.334547024191123E7, 3.3230579786622613E-8], [3.33992757825956E7, 3.373537707362254E-8], [3.34143308852377E7, 3.387715612971713E-8], [3.35628785896787E7, 3.528815098934897E-8], [3.3567984649274334E7, 3.5337022989680616E-8], [3.3790499056637436E7, 3.7489066662508415E-8], [3.401301346400054E7, 3.967926813093215E-8], [3.423552787136364E7, 4.18998824808515E-8], [3.445804227872674E7, 4.4142213209971193E-8], [3.468055668608984E7, 4.639727336666214E-8], [3.4903071093452945E7, 4.8655601797499914E-8], [3.512558550081605E7, 5.0906986231950155E-8], [3.534809990817915E7, 5.314118908239432E-8], [3.557061431554225E7, 5.534754840542827E-8], [3.579312872290535E7, 5.7515301492077454E-8], [3.6015643130268455E7, 5.963343155636237E-8], [3.623815753763156E7, 6.169099961473982E-8], [3.646067194499466E7, 6.36771706458626E-8], [3.668318635235776E7, 6.558134147262161E-8], [3.690570075972086E7, 6.739317575825708E-8], [3.7128215167083964E7, 6.910273356792523E-8], [3.7350729574447066E7, 7.070056767691155E-8], [3.757324398181017E7, 7.217781592832842E-8], [3.779575838917327E7, 7.352628833650528E-8], [3.801827279653637E7, 7.473854769708727E-8], [3.824078720389947E7, 7.580798255250061E-8], [3.8463301611262575E7, 7.672890956413454E-8], [3.868581601862568E7, 7.749652428480534E-8], [3.890833042598878E7, 7.810703850341024E-8], [3.913084483335188E7, 7.855769913993287E-8], [3.935335924071498E7, 7.884673920693017E-8], [3.9575873648078084E7, 7.897356937561128E-8], [3.9798388055441186E7, 7.893850818711468E-8], [4.002090246280429E7, 7.874301748963837E-8], [4.024341687016739E7, 7.83895429911886E-8], [4.046593127753049E7, 7.788151097947443E-8], [4.068844568489359E7, 7.722328271374953E-8], [4.0910960092256695E7, 7.642009932180852E-8], [4.11334744996198E7, 7.547801811128886E-8], [4.13559889069829E7, 7.440384132073114E-8], [4.1578503314346E7, 7.320503843181666E-8], [4.18010177217091E7, 7.188966323828323E-8], [4.2023532129072204E7, 7.046626691824421E-8], [4.2246046536435306E7, 6.894380838442911E-8], [4.246856094379841E7, 6.733156319134155E-8], [4.269107535116151E7, 6.563903225993561E-8], [4.291358975852461E7, 6.387585164022468E-8], [4.313610416588771E7, 6.205170447168785E-8], [4.3358618573250815E7, 6.017623622231025E-8], [4.358113298061392E7, 5.825897419178833E-8], [4.380364738797702E7, 5.630929329787255E-8], [4.402616179534012E7, 5.433619268688542E-8], [4.424867620270322E7, 5.234845026351158E-8], [4.4471190610066324E7, 5.035442960878161E-8], [4.469370501742943E7, 4.8362064032585206E-8], [4.491621942479253E7, 4.637881565008667E-8], [4.513873383215563E7, 4.4411642149119025E-8], [4.536124823951873E7, 4.2466971211613864E-8], [4.558376264688183E7, 4.055068243314524E-8], [4.5806277054244936E7, 3.866809647557866E-8], [4.602879146160804E7, 3.682397109027394E-8], [4.625130586897114E7, 3.502250356459648E-8], [4.647382027633424E7, 3.326733907360572E-8], [4.669633468369734E7, 3.1561551262168636E-8], [4.6918849091060445E7, 2.990780001625905E-8], [4.714136349842355E7, 2.830813300584589E-8], [4.736387790578665E7, 2.6764167951286223E-8], [4.758639231314975E7, 2.5277048943859782E-8], [4.780890672051285E7, 2.384760578009919E-8], [4.8031421127875954E7, 2.2476182338872392E-8], [4.8253935535239056E7, 2.116271885762594E-8], [4.847644994260216E7, 1.9907084567055366E-8], [4.869896434996526E7, 1.8708677010368976E-8], [4.892147875732836E7, 1.7566725184159497E-8], [4.914399316469146E7, 1.6480071017261256E-8], [4.9366507572054565E7, 1.5447715215985092E-8], [4.958902197941767E7, 1.4468021818001231E-8], [4.981153638678077E7, 1.3539694258246471E-8], [5.003405079414387E7, 1.2661219456845971E-8], [5.025656520150697E7, 1.183061024870171E-8], [5.0479079608870074E7, 1.1046486350468173E-8], [5.0701594016233176E7, 1.0306486974130664E-8], [5.092410842359628E7, 9.609491968625416E-9], [5.09886112379647E7, 9.415050870211176E-9], [5.10446172669236E7, 9.249127402055274E-9], [5.114662283095938E7, 8.953424820190842E-9], [5.11556651912052E7, 8.927627087336734E-9], [5.13606109187973E7, 8.359544214175555E-9], [5.136913723832248E7, 8.336626948432956E-9], [5.159165164568558E7, 7.75706226720022E-9], [5.1814166053048685E7, 7.213030859040778E-9], [5.203668046041179E7, 6.702962093181175E-9], [5.225919486777489E7, 6.225078156906842E-9], [5.248170927513799E7, 5.77771453761049E-9], [5.270422368250109E7, 5.359094860990313E-9], [5.2926738089864194E7, 4.96808059591472E-9], [5.3149252497227296E7, 4.602465366270837E-9], [5.33717669045904E7, 4.261638884223211E-9], [5.35942813119535E7, 3.943695748973201E-9], [5.36018422035158E7, 3.933243639415339E-9], [5.3812628127608E7, 3.6528055594558525E-9], [5.38167957193166E7, 3.6474675554236397E-9], [5.40393101266797E7, 3.3714784901539128E-9], [5.40992272752805E7, 3.3005186543441413E-9], [5.4140825831174E7, 3.252069109480557E-9], [5.4261824534042805E7, 3.114981982588904E-9], [5.448433894140591E7, 2.876514610921874E-9], [5.46558332857262E7, 2.704204496451157E-9], [5.470685334876901E7, 2.654804972030467E-9], [5.492936775613211E7, 2.449279997974697E-9], [5.515188216349521E7, 2.258454043680588E-9], [5.5374396570858315E7, 2.081686653843968E-9], [5.559691097822142E7, 1.9179697920660385E-9], [5.581942538558452E7, 1.7665426612293236E-9], [5.604193979294762E7, 1.626065098693421E-9], [5.626445420031072E7, 1.49614498453785E-9], [5.6486968607673824E7, 1.3762453302352032E-9], [5.6709483015036926E7, 1.2654586133740516E-9], [5.693199742240003E7, 1.1631384005025152E-9], [5.715451182976313E7, 1.0689277570891052E-9], [5.737702623712623E7, 9.821383007651451E-10], [5.759954064448933E7, 9.019228079439099E-10], [5.7822055051852435E7, 8.281558305250084E-10], [5.804456945921554E7, 7.601261708689502E-10], [5.826708386657864E7, 6.974236494128343E-10], [5.848959827394174E7, 6.399100742874504E-10], [5.871211268130484E7, 5.866716466838593E-10], [5.88684343646167E7, 5.519945994387745E-10], [5.8934627088667944E7, 5.377708793428969E-10], [5.9157141496031046E7, 4.929740208171966E-10], [5.937965590339415E7, 4.516968696568849E-10], [5.960217031075725E7, 4.137045220397654E-10], [5.982468471812035E7, 3.788033234487049E-10], [6.004719912548345E7, 3.4664130240762545E-10], [6.0269713532846555E7, 3.1698059776240945E-10], [6.049222794020966E7, 2.899882587855077E-10], [6.071474234757276E7, 2.6506656608100475E-10], [6.093725675493586E7, 2.4209900789120555E-10], [6.115977116229896E7, 2.2103593811655855E-10], [6.1382285569662064E7, 2.0143211332531542E-10], [6.1604799977025166E7, 1.8353784123436486E-10], [6.182731438438827E7, 1.6717944385448084E-10], [6.204982879175137E7, 1.5220111550277103E-10], [6.227234319911447E7, 1.3835248433030212E-10], [6.249485760647757E7, 1.255847789355868E-10], [6.2717372013840675E7, 1.1380793909048512E-10], [6.293988642120378E7, 1.0305986444688641E-10], [6.316240082856688E7, 9.322756090744973E-11], [6.338491523592998E7, 8.417633428622255E-11], [6.360742964329308E7, 7.595000559975951E-11], [6.3829944050656185E7, 6.841494725310427E-11], [6.405245845801929E7, 6.148725413470557E-11], [6.427497286538239E7, 5.5159213494249565E-11], [6.449748727274549E7, 4.945143041487957E-11], [6.472000168010859E7, 4.41847972759339E-11], [6.4942516087471694E7, 3.9486169243782614E-11], [6.5165030494834796E7, 3.5175150930279616E-11], [6.53875449021979E7, 3.1236270706467553E-11], [6.5610059309561E7, 2.7736189221378147E-11], [6.58325737169241E7, 2.450351767161702E-11], [6.60550881242872E7, 2.162579815091774E-11], [6.6277602531650305E7, 1.897117048017393E-11], [6.650011693901341E7, 1.6664280350296875E-11], [6.672263134637651E7, 1.4598156765707505E-11], [6.694514575373961E7, 1.2782110766396022E-11], [7.02788019989139E7, 1.1656941865358312E-12]]
            //            println "------------- start xyPairs : ${xyPairs0.size()} : ${xyPairs.size()}"
            xyPairs.eachWithIndex {List list, int index ->
                xyPairs1[index] = list.collect {it * 2}
                xyPairs2[index] = list.collect {it * 3}
            }
//            println xyPairs
            //            gIndex++
            //            println xyPairs
            println "------------- end xyPairs : ${xyPairs.size()} "
            String name = "test"

            xyPairs.eachWithIndex {List xyPair, int index ->
                currentValues << new ReportChartDataBean(x: xyPair[0], y: xyPair[1], line: "incured", period: 0)
            }
            xyPairs1.eachWithIndex {List xyPair, int index ->
                currentValues << new ReportChartDataBean(x: xyPair[0], y: xyPair[1], line: "reserved", period: 0)
            }
            xyPairs2.eachWithIndex {List xyPair, int index ->
                currentValues << new ReportChartDataBean(x: xyPair[0], y: xyPair[1], line: "paid", period: 0)
            }

            JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(currentValues);
            return jrBeanCollectionDataSource
        }

        model.metaClass.getFieldFunctionValues = {String path, int periodIndex ->
            Collection currentValues = new ArrayList()
            currentValues << ["functionName": "incurred", "meanValue": "1234567890.5", "varValue": "1234567890.5", "tVarValue": "1234567890.0"]
            currentValues << ["functionName": "paid", "meanValue": "6.5", "varValue": "8.5", "tVarValue": "5.0"]
            currentValues << ["functionName": "reserved", "meanValue": "1.5", "varValue": "7.5", "tVarValue": "65.0"]
            JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(currentValues);
            return jrBeanCollectionDataSource
        }

        model.metaClass.getComments = {String path, int periodIndex ->
            println " ----------------- get comments"
            List list = []
            for (int i = 0; i < 2; i++) {
                list << CommentReportActionTests.getComment(i)
            }
            return list
//            return []
        }

        model.metaClass.addCommentData = {Comment comment, Collection currentValues ->
            String boxTitle = comment.path + " P" + String.valueOf(comment.period)
            String userAndDate = "testUser" + " " + DateFormatUtils.formatDetailed(comment.lastChange)
            String tags = comment.getTags().join(", ")
            String addedFiles = "Attachments: " + comment.getFiles().join(", ")
            currentValues << ["boxTitle": boxTitle, "userAndDate": userAndDate, "tags": tags, "addedFiles": addedFiles, "text": comment.getText()]

        }

        model.metaClass.getPeriodLabel = { int p ->
            return p + ""
        }

        action.model = model
        model.metaClass.getReport = {->
            Map params = model.parameters
            JRBeanCollectionDataSource chartsDataSource = model.getCollectionDataSource()
//            JRBeanCollectionDataSource commentsDataSource = model.getCommentsDataSource("path",0)
            params["charts"] = chartsDataSource
//            params["comments"] = commentsDataSource
            params["title"] = "Gira Report"
            params["footer"] = "sample report generated by PillarOne by testUser,"
            params["infos"] = createItemSettingsDataSource()
            params["currentUser"] = "testUser"
            params["itemInfo"] = "Gira report"
            params["_file"] = "GiraReport"
            params["SUBREPORT_DIR"] = ReportHelper.getReportFolder()
            params["Comment"] = "Comment"
            params["p1Icon"] = getClass().getResource(UIUtils.ICON_DIRECTORY + "application.png")
//            params["p1Logo"] = getClass().getResource(UIUtils.ICON_DIRECTORY + "pdf-reports-header.png")
            params["p1Logo"] = getClass().getResource(UIUtils.ICON_DIRECTORY + "pillarone-logo-transparent background report.jpg")
            params["pdf_point"] = getClass().getResource(UIUtils.ICON_DIRECTORY + "pdf_point.png")
            return ReportHelper.getReportOutputStream(params, chartsDataSource).toByteArray()
        }

        action.doActionPerformed(null)

    }


}
