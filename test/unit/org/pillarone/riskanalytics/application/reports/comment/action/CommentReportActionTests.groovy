package org.pillarone.riskanalytics.application.reports.comment.action

import org.pillarone.riskanalytics.core.simulation.item.parameter.comment.Comment
import com.ulcjava.base.application.ULCComponent
import org.pillarone.riskanalytics.core.output.FileOutput
import org.pillarone.riskanalytics.application.util.LocaleResources
import org.pillarone.riskanalytics.core.parameter.comment.CommentDAO
import org.joda.time.DateTime
import org.pillarone.riskanalytics.core.parameter.comment.Tag
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource
import org.pillarone.riskanalytics.application.ui.util.DateFormatUtils
import org.pillarone.riskanalytics.application.reports.bean.PropertyValuePairBean
import org.pillarone.riskanalytics.application.ui.util.UIUtils
import org.pillarone.riskanalytics.application.reports.ReportHelper

/**
 * @author fouad.jaada@intuitive-collaboration.com
 */
class CommentReportActionTests extends GroovyTestCase {
    
    @Override
    protected void setUp() {
        LocaleResources.setTestMode()
        super.setUp()
    }

    @Override
    protected void tearDown() {
        LocaleResources.clearTestMode()
        super.tearDown()
    }




    void testGeneratePDF() {
        CommentReportAction reportAction = new CommentReportAction(null)
        File testExportFile = File.createTempFile("test", ".pdf")
        reportAction.metaClass.getFileName = {->

            println "testExportFile ${testExportFile.getAbsolutePath()}"
            return testExportFile.getAbsolutePath()
        }
        reportAction.metaClass.getComments = {->
            List list = []
            for (int i = 0; i < 10; i++) {
                list << getComment(i)
            }
            return list
        }
        reportAction.metaClass.saveReport = {def output, String fileName, ULCComponent component ->
//            File f = new File("E:/downloads/reports/" + fileName)
            FileOutputStream fos = new FileOutputStream(testExportFile)
            fos.write(output)
        }

        reportAction.metaClass.addCommentData = {Comment comment, Collection currentValues ->
            String boxTitle = comment.path + " P" + String.valueOf(comment.period) + " testUser" + " " + DateFormatUtils.formatDetailed(comment.lastChange)
            String tags = comment.getTags().join(", ")
            String addedFiles = "Attachments: " + comment.getFiles().join(", ")
            currentValues << ["boxTitle": boxTitle, "tags": tags, "addedFiles": addedFiles, "text": comment.getText()]

        }

        reportAction.metaClass.getReport = {->
            Map params = new HashMap()
            JRBeanCollectionDataSource collectionDataSource = reportAction.getCollectionDataSource()
            params["comments"] = collectionDataSource
            params["title"] = "Parameterization comments"
            params["footer"] = "sample report generated by PillarOne by testUser,"
            params["infos"] = createSimulationSettingsDataSource()
            params["currentUser"] = "testUser"
            params["itemInfo"] = "Parameterization Info"
            params["_file"] = "CommentReport"
            params["SUBREPORT_DIR"] = ReportHelper.getReportFolder()
            params["Comment"] = "Comment"
            params["p1Icon"] = getClass().getResource(UIUtils.ICON_DIRECTORY + "application.png")
            params["p1Logo"] = getClass().getResource(UIUtils.ICON_DIRECTORY + "pdf-reports-header.png")
            return ReportHelper.commentReport(params, collectionDataSource).toByteArray()
        }

        reportAction.doActionPerformed(null)
        verifyExport(testExportFile)
    }

    Comment getComment(int index) {
        CommentDAO dao = new CommentDAO(comment: getText(index), path: "org.riskanalytics.jasper.report.test.pdf.export.path${index}", periodIndex: index, timeStamp: new DateTime())
        Comment comment = new Comment(dao)
        comment.metaClass.getTags = {->
            [new Tag(name: "tag1"), new Tag(name: "tag2")]
        }
        comment.metaClass.getFiles = {->
            ["file1", "file2"]
        }
        return comment
    }

    String getText(int index) {
        StringBuilder sb = new StringBuilder()
        for (int i = 0; i < 60; i++) {
            sb.append("Text$index ")
            if (i % 9 == 0)
                sb.append("\n")
        }
        return sb.toString()
    }

    //just for test
    public static JRBeanCollectionDataSource createSimulationSettingsDataSource() {
        Collection currentValues = new ArrayList<PropertyValuePairBean>()
        currentValues << new PropertyValuePairBean(property: "Model", value: "ModelTest")
        currentValues << new PropertyValuePairBean(property: "Parameterization", value: "P1")
        currentValues << new PropertyValuePairBean(property: "End Date", value: DateFormatUtils.formatDetailed(new DateTime()))
        JRBeanCollectionDataSource jrBeanCollectionDataSource = new JRBeanCollectionDataSource(currentValues);
        return jrBeanCollectionDataSource

    }

    private void verifyExport(File exportedFile) {
        assertTrue(exportedFile.exists())
        assertTrue("pdf not exported", exportedFile.size() > 0)
        exportedFile.delete()
    }
}
